services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://bubble_user:bubble_pass@db:5432/bubble_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/__pycache__
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bubble_dev
      POSTGRES_USER: bubble_user
      POSTGRES_PASSWORD: bubble_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bubble_user -d bubble_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped

  # Test service following Interface First Design principles
  test:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://bubble_user:bubble_pass@test_db:5432/bubble_test
      - REDIS_URL=redis://test_redis:6379
      - ENVIRONMENT=testing
      - DEBUG=false
    depends_on:
      test_db:
        condition: service_healthy
      test_redis:
        condition: service_started
    volumes:
      - ./backend:/app
    command: python -m pytest app/tests/ -v --tb=short
    profiles:
      - test

  # Test database - isolated from development
  test_db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: bubble_test
      POSTGRES_USER: bubble_user
      POSTGRES_PASSWORD: bubble_pass
    # No additional volumes needed for test database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bubble_user -d bubble_test"]
      interval: 5s
      timeout: 3s
      retries: 3
    profiles:
      - test

  # Test Redis - isolated from development
  test_redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    profiles:
      - test

  # Celery Worker for background processing
  celery_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery_app worker --loglevel=info --queues=validation,bulk_validation,maintenance
    environment:
      - DATABASE_URL=postgresql://bubble_user:bubble_pass@db:5432/bubble_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/__pycache__
    restart: unless-stopped

  # Celery Beat for periodic tasks
  celery_beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://bubble_user:bubble_pass@db:5432/bubble_dev
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - celery_beat_data:/tmp
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  celery_beat_data: