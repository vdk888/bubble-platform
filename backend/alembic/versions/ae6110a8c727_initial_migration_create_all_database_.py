"""Initial migration: Create all database tables

Revision ID: ae6110a8c727
Revises: 
Create Date: 2025-08-23 17:18:16.252840

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ae6110a8c727'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('role', sa.Enum('USER', 'ADMIN', 'PREMIUM', name='userrole'), nullable=False),
    sa.Column('subscription_tier', sa.Enum('FREE', 'PRO', 'ENTERPRISE', name='subscriptiontier'), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    
    # Create universes table
    op.create_table('universes',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('screening_criteria', sa.JSON(), nullable=True),
    sa.Column('last_screening_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('turnover_rate', sa.Float(), nullable=True),
    sa.Column('owner_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create strategies table
    op.create_table('strategies',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('universe_id', sa.String(length=36), nullable=False),
    sa.Column('indicators', sa.JSON(), nullable=True),
    sa.Column('allocation_rules', sa.JSON(), nullable=True),
    sa.Column('backtest_results', sa.JSON(), nullable=True),
    sa.Column('is_active_strategy', sa.Boolean(), nullable=True),
    sa.Column('owner_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['universe_id'], ['universes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create portfolios table
    op.create_table('portfolios',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('portfolio_type', sa.Enum('MASTER', 'STRATEGY_SPECIFIC', name='portfoliotype'), nullable=False),
    sa.Column('total_value', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('cash_balance', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('risk_metrics', sa.JSON(), nullable=True),
    sa.Column('rebalance_frequency', sa.String(length=20), nullable=True),
    sa.Column('last_rebalance_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('owner_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create portfolio_allocations table
    op.create_table('portfolio_allocations',
    sa.Column('portfolio_id', sa.String(length=36), nullable=False),
    sa.Column('strategy_id', sa.String(length=36), nullable=True),
    sa.Column('symbol', sa.String(length=20), nullable=True),
    sa.Column('allocation_percentage', sa.DECIMAL(precision=5, scale=4), nullable=False),
    sa.Column('target_quantity', sa.DECIMAL(precision=15, scale=4), nullable=True),
    sa.Column('current_quantity', sa.DECIMAL(precision=15, scale=4), nullable=True),
    sa.Column('current_value', sa.DECIMAL(precision=15, scale=2), nullable=True),
    sa.Column('allocation_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create orders table
    op.create_table('orders',
    sa.Column('symbol', sa.String(length=20), nullable=False),
    sa.Column('side', sa.Enum('BUY', 'SELL', name='orderside'), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=15, scale=4), nullable=False),
    sa.Column('order_type', sa.Enum('MARKET', 'LIMIT', 'STOP', 'STOP_LIMIT', name='ordertype'), nullable=False),
    sa.Column('limit_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('stop_price', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('time_in_force', sa.Enum('DAY', 'GTC', 'IOC', 'FOK', name='timeinforce'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUBMITTED', 'FILLED', 'PARTIALLY_FILLED', 'CANCELLED', 'REJECTED', name='orderstatus'), nullable=False),
    sa.Column('broker', sa.String(length=50), nullable=False),
    sa.Column('broker_order_id', sa.String(length=100), nullable=True),
    sa.Column('strategy_id', sa.String(length=36), nullable=True),
    sa.Column('portfolio_id', sa.String(length=36), nullable=True),
    sa.Column('order_metadata', sa.JSON(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategies.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create executions table
    op.create_table('executions',
    sa.Column('order_id', sa.String(length=36), nullable=False),
    sa.Column('quantity', sa.DECIMAL(precision=15, scale=4), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('total_value', sa.DECIMAL(precision=15, scale=2), nullable=False),
    sa.Column('fees', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('broker_execution_id', sa.String(length=100), nullable=True),
    sa.Column('execution_metadata', sa.JSON(), nullable=True),
    sa.Column('executed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create conversations table
    op.create_table('conversations',
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('context_data', sa.JSON(), nullable=True),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Create chat_messages table
    op.create_table('chat_messages',
    sa.Column('conversation_id', sa.String(length=36), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ASSISTANT', 'SYSTEM', name='messagerole'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('tool_calls', sa.JSON(), nullable=True),
    sa.Column('message_metadata', sa.JSON(), nullable=True),
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('chat_messages')
    op.drop_table('conversations')
    op.drop_table('executions')
    op.drop_table('orders')
    op.drop_table('portfolio_allocations')
    op.drop_table('portfolios')
    op.drop_table('strategies')
    op.drop_table('universes')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###